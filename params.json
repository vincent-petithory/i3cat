{"name":"I3cat","tagline":"A simple program to combine multiple i3bar JSON inputs into one to forward to i3bar.","body":"> A simple program to combine multiple i3bar JSON inputs into one to forward to i3bar.\r\n\r\n[![wercker status](https://app.wercker.com/status/f9749c41b63024450dc703f139e922ce/s/ \"wercker status\")](https://app.wercker.com/project/bykey/f9749c41b63024450dc703f139e922ce)\r\n\r\n## Motivation\r\n\r\n * enjoy the simplicity of i3status, do not replace it with a fully featured wrapper\r\n * use simple shell scripts to add new i3bar blocks\r\n\r\n## Walkthrough\r\n\r\n### Install\r\n\r\nSeveral options:\r\n\r\n * Download a binary for your platform [here](http://gobuild.io/github.com/vincent-petithory/i3cat)\r\n * [Install Go](http://golang.org/doc/install) and run `go get github.com/vincent-petithory/i3cat`\r\n * If you're on Arch Linux, you can install from [AUR](https://aur.archlinux.org/packages/i3cat-git/).\r\n\r\n### Get what you had with i3status:\r\n\r\n`status_command i3status --config ~/.i3/status` becomes `status_command echo \"i3status --config ~/.i3/status\" | i3cat`\r\n\r\nBut since you will want to add other blocks, it's more handy to add the commands in a conf file:\r\n\r\n\t$ cat ~/.i3/i3cat.conf\r\n\t# i3 status\r\n\ti3status -c ~/.i3/status\r\n\r\nand the status command is now `status_command i3cat` (`~/.i3/i3cat.conf` is the default location for its conf file).\r\n\r\nNote that your i3status'conf must have his output in i3bar format. If you didn't have it yet, modify it as follows:\r\n\r\n\tgeneral {\r\n\t\t...\r\n\t\toutput_format = i3bar\r\n\t\t...\r\n\t}\r\n\r\n### Add a block\r\n\r\nSay we want to display the current song played by MPD and its state. The script could be:\r\n\r\n\t$ cat ~/.i3/mpd-nowplaying.sh\r\n\t#!/bin/sh\r\n\t(while :; do\r\n\t\tdisplay_song \"$(mpc current --wait)\"\r\n\tdone) &\r\n\r\n\twhile :; do\r\n\t\tdisplay_song \"$(mpc current)\"\r\n\t\tmpc idle player > /dev/null\r\n\tdone\r\n\r\nEdit `~/.i3/i3cat.conf`:\r\n\r\n\t$ cat i3cat.conf\r\n\t# mpc status\r\n\t~/.i3/mpd-nowplaying.sh\r\n\t# i3 status\r\n\ti3status -c ~/.i3/status\r\n\r\nThe order matters: the output of the commands are sent to i3bar in that order.\r\nLines starting with `#` are comments and ignored.\r\n\r\nNote the JSON output of the script is an array. `i3cat` also supports variants like the output from `i3status`: a i3bar header (or not) followed by an infinite array.\r\n\r\n### Listen for click events on a block\r\n\r\ni3cat listens for click events generated by the user and writes their JSON representation to the STDIN of the command which created the clicked block.\r\n\r\nSee [the i3bar protocol](http://i3wm.org/docs/i3bar-protocol.html) for details on its structure.\r\n\r\nUsing our MPD script from above, we want that when we click on its block, we want i3 to focus a container marked as _music_ (e.g ncmpcpp).\r\nAll that is needed is to read the process' `STDIN`. Each i3bar click event is output on one line, so a generic recipe boils down to:\r\n\r\n\tcat | while read line; do on_click_event \"$line\"; done\r\n\r\n`on_click_event` will parse the JSON output and perform the action.\r\n\r\nFull example below:\r\n\r\n\t#!/bin/sh\r\n\r\n\tclick_event_prop() {\r\n\t\tpython -c \"import json,sys; obj=json.load(sys.stdin); print(obj['$1'])\"\r\n\t}\r\n\r\n\tdisplay_song() {\r\n\t\tstatus=\r\n\t\tcolor=\r\n\t\tcase $(mpc status | sed 1d | head -n1 | awk '{ print $1 }') in\r\n\t\t'[playing]')\r\n\t\t\tstatus=\r\n\t\t\tcolor='#36a8d5'\r\n\t\t\t;;\r\n\t\t'[paused]')\r\n\t\t\tstatus=\r\n\t\t\tcolor=\r\n\t\t\t;;\r\n\t\tesac\r\n\t\techo '[{\"name\": \"mpd\", \"instance\": \"now playing\", \"full_text\": \" '${status}' '$1'\", \"color\": \"'${color}'\"}]'\r\n\t}\r\n\r\n\ton_click_event() {\r\n\t\tbutton=$(echo \"$@\" | click_event_prop button)\r\n\t\tcase $button in\r\n\t\t1)\r\n\t\t\ti3-msg '[con_mark=\"music\"]' focus > /dev/null\r\n\t\t\t;;\r\n\t\tesac\r\n\t}\r\n\r\n\t(while :; do\r\n\t\tdisplay_song \"$(mpc current --wait)\"\r\n\tdone) &\r\n\r\n\t(while :; do\r\n\t\tdisplay_song \"$(mpc current)\"\r\n\t\tmpc idle player > /dev/null\r\n\tdone) &\r\n\r\n\tcat | while read line; do on_click_event \"$line\"; done\r\n\r\n\r\n#### Case of programs which you can't read stdin from\r\n\r\nYou simply need to wrap them in a script of your choice.\r\nExample with i3status and a Shell script:\r\n\r\n\t#!/bin/sh\r\n\r\n\tclick_event_prop() {\r\n\t\tpython -c \"import json,sys; obj=json.load(sys.stdin); print(obj['$1'])\"\r\n\t}\r\n\r\n\ton_click_event() {\r\n\t\tbutton=$(echo \"$@\" | click_event_prop button)\r\n\t\tif [ $button != '1' ]; then\r\n\t\treturn\r\n\t\tfi\r\n\t\tname=$(echo \"$@\" | click_event_prop name)\r\n\t\tinstance=$(echo \"$@\" | click_event_prop instance)\r\n\t\t# Do something with block $name::$instance ...\r\n\t}\r\n\r\n\t# Output i3status blocks\r\n\ti3status -c $HOME/.i3/status &\r\n\t# Read stdin for JSON click events\r\n\tcat | while read line; do on_click_event \"$line\"; done\r\n\r\n### More\r\n\r\nRun `i3cat -h` for a list of options:\r\n\r\n    Usage of i3cat:\r\n      -cmd-file=\"$HOME/.i3/i3cat.conf\": File listing of the commands to run. It will read from STDIN if - is provided\r\n      -debug-file=\"\": Outputs JSON to this file as well; for debugging what is sent to i3bar.\r\n      -header-clickevents=false: The i3bar header click_events\r\n      -header-contsignal=0: The i3bar header cont_signal\r\n      -header-stopsignal=0: The i3bar header stop_signal\r\n      -header-version=1: The i3bar header version\r\n      -log-file=\"\": Logs i3cat events in this file. Defaults to STDERR\r\n\r\n## Design\r\n\r\n`i3cat` sends data to i3bar only when necessary: when a command sends an updated output of its blocks, `i3cat` caches it and sends to i3bar the updated output of all blocks, using the latest cached blocks of the other commands. This means commands don't need to have the same update frequency.\r\n\r\nIt is not advised to send SIGSTOP and SIGCONT signals to`i3cat`, as its subprocesses will continue to output data anyway.\r\nFor pausing and resuming processing (usually asked by i3bar), `i3cat` will listen for SIGUSR1 and SIGUSR2 for pausing and resuming, respectively. It will then forward the signals specified with `-header-stopsignal` and `-header-contsignal` flags (defaults to SIGSTOP and SIGCONT) to all its managed processes.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}